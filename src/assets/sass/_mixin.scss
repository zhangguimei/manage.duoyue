@charset "UTF-8";
// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------
// Center-align a block level element
@mixin center-block {
  margin-left: auto;
  margin-right: auto;
}

%center-block {
  @include center-block;
}

// clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%clearfix {
  @include clearfix;
}

// ellipsis
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

%ellipsis {
  @include ellipsis;
}

// ellipsis multi
@mixin ellipsis-lines($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  word-break: break-all;
}

%ellipsis-lines {
  @include ellipsis-lines;
}

// word-break
// 用于链接地址强制换行
@mixin word-break {
  white-space: normal;
  word-wrap: break-word;
  word-break: break-all;
}

%word-break {
  @include word-break;
}

// disabled
// 禁用样式，加!important
@mixin disabled($textColor: nth($colorDisabled, 1), $bgColor: nth($colorDisabled, 2), $borderColor: true) {
  background-color: $bgColor !important;
  color: $textColor !important;
  cursor: default !important;
  pointer-events: none !important;
  @if $borderColor {
    border: 1px solid nth($colorDisabled, 3);
  }
}

%disabled {
  @include disabled;
}

// fixed top & bottom
@mixin fixed($pos: 0) {
  position: fixed;
  left: 0;
  right: 0;
  @if $pos==bottom {
    bottom: 0;
  } @else {
    top: $pos;
  }
}

%fixed-top {
  @include fixed;
}

%fixed-bottom {
  @include fixed($pos: bottom);
}

// justify
@mixin justify {
  display: flex;
  justify-content: space-between;
}

%justify {
  @include justify;
}

// flex 等分
@mixin equal-flex($children: li) {
  display: flex;
  $childrenEle: li div p a span strong;
  @if index($childrenEle, $children) {
    #{$children} {
      flex: 1;
    }
  } @else {
    .#{$children} {
      flex: 1;
    }
  }
}

%equal-flex {
  @include equal-flex;
}

// flex center
@mixin center-flex($direction: both) {
  display: flex;
  @if $direction==both {
    justify-content: center;
    align-items: center;
  } @else if $direction==x {
    justify-content: center;
  } @else if $direction==y {
    align-items: center;
  }
}

%center-flex {
  @include center-flex;
}

%center-flex-x {
  @include center-flex(x);
}

%center-flex-y {
  @include center-flex(y);
}

// translate center
@mixin center-translate($direction: both) {
  position: absolute;
  @if $direction==both {
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
  } @else if $direction==x {
    left: 50%;
    transform: translate3d(-50%, 0, 0);
  } @else if $direction==y {
    top: 50%;
    transform: translate3d(0, -50%, 0);
  }
}

%center-translate {
  @include center-translate;
}

%center-translate-x {
  @include center-translate(x);
}

%center-translate-y {
  @include center-translate(y);
}

// triangle 三角箭头
%triangle-basic {
  content: "";
  height: 0;
  width: 0;
  overflow: hidden;
}

@mixin triangle($direction: bottom, $borderWidth: 6px, $borderColor: $gray6) {
  @extend %triangle-basic;
  @if $direction==top {
    border-bottom: $borderWidth solid $borderColor;
    border-left: $borderWidth dashed transparent;
    border-right: $borderWidth dashed transparent;
  } @else if $direction==right {
    border-left: $borderWidth solid $borderColor;
    border-top: $borderWidth dashed transparent;
    border-bottom: $borderWidth dashed transparent;
  } @else if $direction==bottom {
    border-top: $borderWidth solid $borderColor;
    border-left: $borderWidth dashed transparent;
    border-right: $borderWidth dashed transparent;
  } @else if $direction==left {
    border-right: $borderWidth solid $borderColor;
    border-top: $borderWidth dashed transparent;
    border-bottom: $borderWidth dashed transparent;
  }
}

%triangle-bottom {
  @include triangle;
}

%triangle-top {
  @include triangle($direction: top);
}

// btn
//----------------------------------------------------
// btn-basic
// 按钮基本样式，联合申明
%btn-basic {
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  text-align: center;
  border: 0 none;
  box-sizing: border-box;
  user-select: none;
}

// btn-size
// 按钮大小
@mixin btn-size($padding: nth($btnSize, 1), $height: nth($btnSize, 2), $radius: $btnRadius, $border: true) {
  //padding: 0 $padding;
  //height: $height;
  //font-size: $fontSize;
  padding-left: $padding;
  padding-right: $padding;
  @include props-dpr(height font-size, $height $fontSize);
  @if $radius {
    //border-radius: $btnRadius;
    @include props-dpr(border-radius, $btnRadius);
  }
  @if $border {
    //line-height: $height - 2;
    $height: $height - 2;
    @include props-dpr(line-height, $height);
  } @else {
    line-height: $height;
    @include props-dpr(line-height, $height);
  }
}

// btn-color
// 包括按钮背景色，文本色，是否有边框
@mixin btn-color($textColor: nth($btnColor, 1), $bgColor: nth($btnColor, 2), $borderColor: $green) {
  color: $textColor;
  background-color: $bgColor;
  @if $borderColor {
    @if length($borderColor)==1 {
      // $borderColor: #dbdbdb
      border: 1px solid $borderColor;
    } @else if length($borderColor)==2 {
      // $borderColor: #dbdbdb #ccc => #dbdbdb
      border: 1px solid nth($borderColor, 1);
    } @else {
      border: $borderColor; // $borderColor: 1px solid #dbdbdb
    }
  }
  &:hover {
    color: $textColor;
    @if lightness($bgColor) > 40% {
      background-color: darken($bgColor, 5%);
    } @else {
      background-color: lighten($bgColor, 5%);
    }
    @if length($borderColor)==2 {
      border-color: nth($borderColor, 2); // $borderColor: #dbdbdb #ccc => #ccc
    }
  }
}

//group column
@mixin group-grid($grid: 2, $margin: $baseMargin) {
  & {
    ul {
      margin-left: -$margin / 2;
      margin-right: -$margin / 2;
      @extend %clearfix;
      li {
        float: left;
        width: 100 / $grid * 1%;
        margin-bottom: $margin;
        padding-left: $margin / 2;
        padding-right: $margin / 2;
      }
    }
  }
}

%group-grid {
  @include group-grid;
}

%group-grid-3 {
  @include group-grid($grid: 3);
}

%group-grid-7 {
  @include group-grid($grid: 7);
}

//Image
%image-style {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

@mixin image-responsive($width: 140px, $height: 200px, $children:img) {
  & {
    position: relative;
    padding-top: $height / $width * 100%;
    #{$children} {
      @extend %image-style;
    }
  }
}

%image-responsive {
  @include image-responsive;
}

%image-responsive1by1 {
  @include image-responsive(100, 100);
}

// px to rem
@function px2rem($value, $fontSizeRoot:$fontSize) {
  @return $value / $fontSizeRoot *1rem;
}

//font-dpr
@mixin font-dpr($font-size) {
  font-size: $font-size;
  [data-dpr="2"] & {
    font-size: $font-size * 2;
  }
  [data-dpr="3"] & {
    font-size: $font-size * 3;
  }
}

//props-dpr
@mixin props-dpr($props, $values) {
  @if length($props)==1 {
    @if length($values)==1 {
      #{$props}: $values;
      [data-dpr="2"] & {
        #{$props}: $values * 2;
      }
      [data-dpr="3"] & {
        #{$props}: $values * 3;
      }
    } @else {
      $valueStr: ();
      @each $value in $values {
        $valueStr: append($valueStr, $value);
      }
      #{$props}: $valueStr;
      [data-dpr="2"] & {
        $valueStr: ();
        @each $value in $values {
          $valueStr: append($valueStr, $value * 2);
        }
        #{$props}: $valueStr;
      }
      [data-dpr="3"] & {
        $valueStr: ();
        @each $value in $values {
          $valueStr: append($valueStr, $value * 3);
        }
        #{$props}: $valueStr;
      }
      //@debug $valueStr;
    }
  } @else {
    @each $prop in $props {
      #{$prop}: nth($values, index($props, $prop));
    }
    [data-dpr="2"] & {
      @each $prop in $props {
        #{$prop}: nth($values, index($props, $prop)) * 2;
      }
    }
    [data-dpr="3"] & {
      @each $prop in $props {
        #{$prop}: nth($values, index($props, $prop)) * 3;
      }
    }
  }
}

//其他占位符
%transition-all {
  transition: all .3s ease-in-out;
}

%page-out {
  transition: transform 0.4s cubic-bezier(0.42, 0, 0.58, 1) 0.1s;
}

%page-in {
  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1);
}

%caret-more {
  display: inline-block;
  position: relative;
  @include props-dpr(width height, 20px 20px);
  &:before, &:after {
    box-sizing: content-box;
    display: block;
    position: absolute;
    @extend %triangle-basic;
    border-left: 15px solid transparent;
    border-top: 10px dashed transparent;
    border-bottom: 10px dashed transparent;
    @include props-dpr(border-left-width border-top-width border-bottom-width, 15px 10px 10px);
  }
  &:before {
    left: 0;
    border-left-color: $gray3;
    z-index: 8;
  }
  &:after {
    right: 0;
    border-left-color: $greenLight;
  }
}

%container {
  @include props-dpr(padding-left padding-right, $basePadding $basePadding);
}

%container2 {
  @include props-dpr(padding, $basePadding);
}

%container3 {
  @include props-dpr(padding-top padding-bottom, $basePadding $basePadding);
}

//Font size
%f10 {
  @include props-dpr(font-size, 10px);
}

%f12 {
  @include props-dpr(font-size, 12px);
}

%f14 {
  @include props-dpr(font-size, 14px);
}

%f16 {
  @include props-dpr(font-size, 16px);
}

%f18 {
  @include props-dpr(font-size, 18px);
}

%f20 {
  @include props-dpr(font-size, 20px);
}

%f22 {
  @include props-dpr(font-size, 22px);
}

%f24 {
  @include props-dpr(font-size, 24px);
}

%f30 {
  @include props-dpr(font-size, 30px);
}

//Margin
%mb10 {
  @include props-dpr(margin-bottom, 10px);
}

%mb20 {
  @include props-dpr(margin-bottom, 20px);
}

%mb30 {
  @include props-dpr(margin-bottom, 30px);
}

%mr10 {
  @include props-dpr(margin-right, 10px);
}

%ml10 {
  @include props-dpr(margin-left, 10px);
}

@mixin blur($value) {
  -webkit-filter: blur($value);
  -moz-filter: blur($value);
  -o-filter: blur($value);
  //filter: url(blur.svg#blur);
  //filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='3');
  //-ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
  //filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
  filter: blur($value);
}